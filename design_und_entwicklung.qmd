# Design und Entwicklung

## Datenbeschaffung

Zur Beschaffung der Daten, legten wir erst fest, welche Daten für uns und das LLM sinvoll sind. Um die Daten auch öfter zu sammeln, da Festool in der Zeit der Entwicklung neue Produkte oder Preise ändern könnte, haben wir diesen Prozess automatisiert. \
Dazu programmierten wir einen Webscraper der dies für alle Produkte auf der Festool Website erledigt und uns die Daten in einer Textdatei speichert.
Folgende Daten wurden gespeichert: 

- URL
- Name
- Artikelnummer
- Beschreibung (Produktbeschreibung)
- Vorteile / Benefits
- Technische Daten
- Highlights

Programmiert wurde der Webscraper mittels Python. 

**Funktionsweise:**

Der Webscraper besucht die Festtool Website und akzeptiert die Cookies. Danach wird für jede Prouktkategorie folgendes ausgeführt. /
Das Programm speichert jede URL eines Prdukts ab, welches sich in der jeweiligen Produktkategorie befindet. \
Im Laufe des Programms besucht der Scraper dann jede URL und speichert die oben genannten Features ab. /
Findet er die Daten nicht, lässt er das Feld frei und geht zum nächsten. Dieser Fall ist allerding selten. 

Aufgrund der Automatisierung können wir nun schnell alle für uns relevanten Produkinformationen aus dem Webshop laden.

***Link zum GitHub Repository: *** [https://github.com/llm-hdm/page-scraper](https://github.com/llm-hdm/page-scraper)

## Prompt Engineering

### Definiton 

Prompt Engineering ist eine Methode, die die Leistung von Large Language Models (LLMs) verbessert, indem sie gezielt formulierte Eingabeanweisungen, sogenannte "Prompts", verwendet. Diese Anweisungen dienen dazu, die Ausgabe des Modells zu lenken und präziser auf spezifische Aufgaben oder Kontexte zuzuschneiden.

Die Grundidee hinter Prompt Engineering besteht darin, dem LLM klare und präzise Anweisungen zu geben, wie es die gestellte Aufgabe verstehen und bearbeiten soll. Diese Prompts können in Form von Beispielsätzen, Fragen oder Anweisungen formuliert werden, um dem Modell Kontext und Richtung zu geben. Durch das Feintuning dieser Prompts kann die Leistung des LLMs verbessert werden, indem es genauer und zielgerichteter reagiert.

Ein Beispiel wäre die Verwendung eines LLMs zur Textgenerierung. Ein Forscher, der die Qualität der Erklärungen des Modells verbessern möchte, könnte ein spezifisches Prompt verwenden, das dem Modell klare Anweisungen gibt, um detaillierte und verständliche Antworten zu generieren. Ein solches Prompt könnte lauten: "Erkläre präzise und verständlich den Prozess der Photosynthese in Pflanzen." Durch die präzise Formulierung des Prompts wird das Modell darauf trainiert, genau auf diese Anforderungen zu reagieren und genaue Erklärungen zu liefern. So kann Prompt Engineering die Ausgabequalität und Relevanz des Modells in bestimmten Anwendungsfällen deutlich verbessern.

### Prompt-Entwicklung

*Prompt 1:* Du bist Chatbot auf einer Webseite. Dein Unternehmen FESTOOL bietet Elektrowerkzeuge, Profigeräte und maßgeschneiderte Systemlösungen für Handwerker an. Du sollst Kunden bei der Kaufentscheidung unterstützen. Nutze die Produktinformationen, um die Fragen zu beantworten. Nutze, wenn möglich, überzeugende "technical_details".
Wenn es keine genaue Übereinstimmung gibt, schlage eine Alternative vor.
Die Antwort soll maximal 500 Zeichen lang sein.
Verlinke ein oder mehrere Produkte, wenn sinnvoll ist, wie folgt:[namedesprodukts](URL aus der Liste der Produktinformationen)

*Prompt 2:* Du bist Chatbot auf einer Webseite. Dein Unternehmen FESTOOL bietet Elektrowerkzeuge, Profigeräte und maßgeschneiderte Systemlösungen für Handwerker an. Du sollst Kunden bei der Kaufentscheidung unterstützen. Nutze die Produktinformationen, um die Fragen zu beantworten. Nutze, wenn möglich, überzeugende "technical_details".
Wenn es keine genaue Übereinstimmung gibt, gib in einem Satz Rückmeldung, dass nichts gefunden wurde.
Die Antwort soll maximal 500 Zeichen lang sein.
Verlinke ein oder mehrere Produkte, wenn sinnvoll ist, wie folgt:[namedesprodukts](URL aus der Liste der Produktinformationen).

*Prompt 3:* Du bist Chatbot auf einer Webseite. Dein Unternehmen FESTOOL bietet Elektrowerkzeuge, Profigeräte und maßgeschneiderte Systemlösungen für Handwerker an. Du sollst Kunden bei der Kaufentscheidung unterstützen. 
Nutze immer zuerst die Produktinformationen, um die Fragen zu beantworten. Nutze, wenn möglich, überzeugende "technical_details".
Versuche, den User genau zu verstehen und einfache Antworten zu geben.
Wenn es keine genaue Übereinstimmung gibt, gib in einem Satz Rückmeldung, dass nichts gefunden wurde.
Die Antwort soll maximal 500 Zeichen lang sein.
Verlinke ein oder mehrere Produkte, wenn sinnvoll ist, wie folgt:[namedesprodukts]
(URL aus der Liste der Produktinformationen)


**Beschreibung:** Wir haben mit diesen drei Prompts (s.o.) angefangen. Alle drei Unterscheiden sich nur leicht, um herauszufinden welche Art von Prompt am besten funktioniert. Die Unterschiede liegen vor allem in der Antwortstrategie und Betonung. Prompt eins ist am allgemeinsten gehalten. Promt zwei und drei unterscheiden sich nur soweit, wie der Prompt Antworten soll und wo der Fokus liegen soll. Die Prompts sind deshalb so kurz gehalten, da wir zu Beginn schwierigkeiten hatten die verfügbaren Tokens des GPT3.5 turbo Modells einzuhalten. 
Nach einigem herumprobieren und zahllosen Anfragen an die API, haben wir die Prompts stück für stück überarbeitet. Dabei sind haben wir unterschiedliche Betonung des Bots, die Anweisung zur Verwendung bestimmer Informationen als auch Rückfragen, die der Bot stellen soll ausprobiert und auf Basis dieser unterschiedlichen Anpassungen einen neuen Prompt entwickelt. Diesen konnten wir dann zudem länger und genauer beschrieben, da wir gleichzeitig auf GPT4.5 turbo umgestellt haben und so mehr Tokens pro Anfrage zur Verfügung hatten.

*Prompt 4:* Du bist Chatbot auf einer Webseite. Dein Unternehmen FESTOOL bietet Elektrowerkzeuge, Profigeräte undmaßgeschneiderte Systemlösungen für Handwerker an.
Du sollst Kunden bei der Kaufentscheidung unterstützen. Nutze die Produktinformationen, um die Fragen zu beantworten erzähle aber niemals dem Kunde das du deinen Informationen daraus hast.
Nutze, wenn möglich, überzeugende "technical_details".
Bevor du eine Antwort gibst durchsuche erst alle relevanten Informationen und beantworte die Fragen nur wenn du etwas in den Produktinformationen finden kannst.
Wenn es keine genaue Übereinstimmung gibt dann sage dem Kunden das er seine Frage spezifizieren soll.
Falls du ein weiteres mal keine Anwort in den Produktinformationen steht dann sage ihm, dass er sich gerne mit einem Kundenberater verbinden kann.
Die Antwort soll maximal 500 Zeichen lang sein.
Verlinke ein oder mehrere Produkte, wenn sinnvoll ist, wie folgt:[namedesprodukts](URL aus der Liste der Produktinformationen)
Achte auf den {style} deiner Antworten.


**Beschreibung: **
Dieser Prompt hat sich schon als recht gut erwiesen. Wir haben uns allerdings dann entschlossen den neuen Assistant von OpenAI zu verwenden, weswegen wir auch den Prompt nochmals leicht überarbeitet haben. Dort haben wir dann auch darauf geachtet, dass der Bot etwas agiler auf Anfragen reagiert und immer dem Kunden eine Antwort geben möchte. Im alten Prompt hatten wir oft das Problem, dass der Chatbot schnell "keine Antworten" mehr auf die Fragen hatte. Dies haben wir damit eliminiert und mit folgendem Prompt die besten Ergebnisse erzielt:

*Final Prompt -* Wir haben den Final Prompt in die Instuctions des Assistent Abgelegt:

Du bist Chatbot auf einer Webseite. Dein Unternehmen FESTOOL bietet Elektrowerkzeuge, Profigeräte und maßgeschneiderte Systemlösungen für Handwerker an. 
Du sollst Kunden bei der Kaufentscheidung unterstützen. Nutze die Produktinformationen, um die Fragen zu beantworten, nur dann, wenn es auch sinnvoll ist.
Falls du keine Informationen in der Datei findest, erwähne das nicht gegenüber dem Kunden, sondern versuche durch Fragen herauszufinden, was der Kunde will.
Halte dich mit technischen Informationen kurz und antworte erst bei gezielteren Fragen tiefgehender und technischer.
Wenn du konkret über ein Produkt sprichst, verlinke dies, wie folgt: [namedesprodukts](URL aus der Liste der Produktinformationen). Wenn du keine passende URL findest, erwähne das Produkt nicht, sondern suche in den Produktinformationen nach weiteren passenden Produkten.
Bleibe stets sachlich und zuvorkommend.
Die Antwort soll maximal 50 Wörter lang sein.
Antworte immer auf Deutsch.

## Software Architecture

Aufgrund der schnellen Entwicklung von technologien im Bereich von LLM's haben wir in der Zeit der Entwicklung zwei verschiedene Software Architekturen implementiert. \
Zu Beginn basierte unser Protoyp auf GPT3.5 turbo. Im Laufe der Entwicklung haben wir das Modell auf 'GPT4 turbo preview' umgestellt. Dies hatte deutliche performance verbesserungen. Gleichzeitig konnten wir die genauigkeit der Antworten des Modells durch neue Prompts verbessern. Zudem hat das neue Modell uns den Vorteil geboten, mehr Tokens pro Request an das Modell mitzugeben. \
Die Vektor-Datenbank (ChromaDB) haben wir vollständig durch OpenAI's eigenen Assistent abgelöst in dem wir das file mit allen Produktinformationen direkt im Assisten hochgeladen haben. Auch hier konnten wir eine deutliche Verbesserung der Performance als auch der Genauigkeit des Outputs des Modells erhalten.

**Version 1:**

<img src="images/Software_Architektur_1.png" width="650">

**Version 2:**

<img src="images/Software_Architektur_2.png" width="650">

## User Interface (UI) Design

Für das Design des User Interface orientierten wir uns an dem Coperate Design von Festool. Uns war es wichtig, dass wir ein Produkt entwickeln dass jederzeit auf dem Webshop, bzw. der Website von Festool eingebunden werden könnte. \
So haben wir uns dazu entschieden einen Button zu bauen, der OnClick ein Chatfenster öffnet. Wir haben besonders darauf geachtet, dass das Chatfenster, wie z.B. von anderen Messengern, vom User intuitiv und gewohnt benutzt werden kann. \
Zudem steht es dem User frei, einen Darkmode oder den normalen weißen Modus des Chatbots zu verwenden.

**Dark-Mode:**

![](images/Darkmode1.png){width=50%} 

**Normal-Mode:**

![](images/Darkmode2.png){width=50%}

## Frontend
Die Benutzeroberfläche unserer Software wurde mit modernen Technologien entwickelt, um eine reibungslose und ansprechende Benutzererfahrung zu gewährleisten.

- **Vite**: Als Build-Tool und Entwicklungs-Server bietet Vite eine schnelle und effiziente Entwicklungsumgebung für das Frontend. Durch die Nutzung von Vite profitiert die Anwendung von schnellen Rebuilds und Live-Reloads während der Entwicklung.

- **React**: Das Frontend-Framework React ermöglicht eine komponentenbasierte Struktur, die die Wiederverwendbarkeit von Code fördert. Die Verwendung von JSX erleichtert das Erstellen von benutzerfreundlichem und dynamischem UI.

- **Tailwind CSS**: Als utility-first CSS-Framework ermöglicht Tailwind CSS die einfache Erstellung von modernen und ansprechenden Benutzeroberflächen. Die vordefinierten Klassen erleichtern das Styling und die Anpassung.

- **SpeechToText API von OpenAI**: Die direkte Integration der SpeechToText API von OpenAI ermöglicht es Benutzern, über gesprochene Sprache mit der Anwendung zu interagieren. Dies erweitert die Zugänglichkeit und bietet eine innovative Möglichkeit der Eingabe.

Jede Komponente im Frontend besteht aus einer Logik/JSX-Datei für die Funktionalität und einer styles.js-Datei für das Styling, um eine klare Trennung von Logik und Präsentation zu gewährleisten.

## Backend

Das Backend unserer Software setzt auf leistungsstarke Technologien, um Anfragen effizient zu verarbeiten und eine nahtlose Kommunikation zwischen dem Frontend und externen Diensten zu ermöglichen.

- **Flask**: Als leichtgewichtiges Web-Framework für Python bietet Flask eine einfache und dennoch flexible Struktur für die Entwicklung von Webanwendungen. Flask ermöglicht es, schnell RESTful APIs zu erstellen.

- **Flask-RESTx**: Dieses Framework macht die Entwicklung von RESTful APIs in Flask noch einfacher. Durch die automatische Validierung von API-Endpunkten erleichtert Flask-RESTx die Erstellung von robusten APIs.

- **OpenAI Assistant**: Der OpenAI Assistant wird im Backend genutzt, um Anfragen der Benutzer zu verarbeiten und qualitativ hochwertige Antworten zu generieren. Die Integration ermöglicht es, fortschrittliche natürliche Sprachverarbeitungstechnologien in die Software zu integrieren.

Die Kombination dieser Technologien bildet ein robustes Backend, das die Interaktionen zwischen dem Frontend und externen Diensten effizient und zuverlässig abwickelt.